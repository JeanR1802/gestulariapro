// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuario (Emprendedor)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?  // Para login con email/password
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con su tienda
  store Store?

  // NextAuth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Tienda del emprendedor
model Store {
  id          String   @id @default(cuid())
  slug        String   @unique // URL amigable: gestularia.com/tienda/mi-negocio
  name        String   // Nombre del negocio
  description String?  // Descripción breve
  logo        String?  // URL del logo
  
  // Personalización
  primaryColor   String @default("#3B82F6")
  backgroundColor String @default("#FFFFFF")
  
  // Estado
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  products Product[]
  orders   Order[]

  @@map("stores")
}

// Productos/Servicios
model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal
  image       String?
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  orderItems OrderItem[]

  @@map("products")
}

// Pedidos
model Order {
  id     String      @id @default(cuid())
  status OrderStatus @default(PENDING)
  total  Decimal
  
  // Datos del cliente
  customerName  String
  customerEmail String
  customerPhone String?
  notes         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  items OrderItem[]

  @@map("orders")
}

// Items del pedido
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal

  // Relaciones
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Estados del pedido
enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

// Modelos NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}